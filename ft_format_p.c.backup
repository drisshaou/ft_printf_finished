# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    ft_format_p.c.backup                               :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: dhaouhao <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2020/01/02 05:03:23 by dhaouhao          #+#    #+#              #
#    Updated: 2020/01/03 19:15:26 by dhaouhao         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "ft_printf.h"

size_t	ft_write_p(t_parse *parsed, void *addr)
{
	char	*str;

	if (parsed->is_prec && parsed->is_width)
		str = ft_apply_prec_n_width_p(parsed, addr);
	else if (parsed->is_prec && !parsed->is_width)
		str = ft_apply_prec_p(parsed, addr);
	else
		str = ft_apply_width_p(parsed, addr);
	return (ft_putstr(str));
}

char	*ft_apply_prec_n_width_p(t_parse *parsed, void *addr)
{
	char	*tmp;
	size_t	len;
	size_t	size;
	char	*str;

	tmp = ft_apply_prec_p(parsed, addr);
	len = ft_strlen(tmp);
	size = (parsed->width > len && parsed->width > 0) ? parsed->width : len;
	if (!(str = malloc(sizeof(char) * (size + 1))))
		return (NULL);
	ft_memset(str, ' ', size);
	if (parsed->is_left)
		ft_memcpy(str, tmp, len);
	else
		ft_memcpy(str + (size - len), tmp, len);
	str[size] = '\0';
	free(tmp);
	return (str);
}

char	*ft_apply_width_p(t_parse *parsed, void *addr)
{
	char		*tmp;
	size_t		size;
	intptr_t	val;

	val = (addr == NULL) ? 0 : (intptr_t)addr;
	tmp = ft_hex_to_str((unsigned long long)val);
	size = ft_strlen(tmp) + 2;
	size = (parsed->is_width && parsed->width > size) ? parsed->width : size;
	return (ft_return_width_p(parsed, size, tmp));
}

char	*ft_return_width_p(t_parse *parsed, size_t sz, char *tmp)
{
	char	*str;
	size_t	ln;

	ln = sz - ft_strlen(tmp);
	if (!(str = malloc(sizeof(char) * (sz + 1))))
		return (NULL);
	if (parsed->is_0_filled)
		ft_memset(str, '0', sz);
	else
		ft_memset(str, ' ', sz);
	if (parsed->is_left)
	{
		ft_memcpy(str, "0x", 2);
		ft_memcpy(str + 2, tmp, ft_strlen(tmp));
	}
	else if (!parsed->is_left)
	{
		ft_memcpy(str + (ln - 2), "0x", 2);
		ft_memcpy(str + ln, tmp, ft_strlen(tmp));
	}
	str[sz] = '\0';
	free(tmp);
	return (str);
}

char	*ft_apply_prec_p(t_parse *parsed, void *addr)
{
	char		*tmp;
	size_t		size;
	intptr_t	val;

	val = (addr == NULL) ? 0 : (intptr_t)addr;
	tmp = ft_hex_to_str((unsigned long long)val);
	size = ft_strlen(tmp);
	size = (parsed->prec > size) ? parsed->prec + 2 : size + 2;
	size = (parsed->prec == 0 && val == 0) ? 2 : size;
	return (ft_return_prec_p(parsed, size, tmp));
}

char	*ft_return_prec_p(t_parse *parsed, size_t sz, char *tmp)
{
	char	*str;
	size_t	ln;

	if (!(str = malloc(sizeof(char) * (sz + 1))))
		return (NULL);
	if (sz != 0)
	{
		ln = sz - ft_strlen(tmp);
		ft_memset(str, '0', sz);
		ft_memcpy(str + (ln - 2), "0x", 2);
		ft_memcpy(str + ln, tmp, ft_strlen(tmp));
	}
	str[sz] = '\0';
	free(tmp);
	return (str);
}
